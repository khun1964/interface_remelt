function setErrorMsg(element, message) {
    const formControl = element.parentElement; // L'élément parent qui contient le champ de formulaire
    const small = formControl.querySelector('small');
    formControl.className = 'form-control error';
    small.innerText = message;
}

function setSuccessMsg(element) {
    const formControl = element.parentElement;
    formControl.className = 'form-control success';
}


Les fonctions setErrorMsg et setSuccessMsg que vous avez partagées manipulent le DOM pour afficher visuellement les messages d'erreur ou de succès sur un formulaire. 
Elles sont typiquement utilisées pour informer l'utilisateur de la validité de son entrée dans des champs spécifiques comme l'email ou le mot de passe. 

Voici un détail de ce que chaque fonction fait :

Fonction setErrorMsg

Cette fonction prend deux paramètres : input et message.

    input : C'est l'élément de formulaire (généralement un champ <input> ou <textarea>) pour lequel un message d'erreur doit être affiché.
    message : C'est le texte du message d'erreur qui sera affiché à l'utilisateur.

La fonction procède comme suit :

    Parent Element : Elle trouve l'élément parent de input (supposé être une div ou un autre conteneur avec une classe spécifique comme form-control). 
    Cet élément parent contient généralement le champ de formulaire ainsi qu'une balise <small> pour les messages d'erreur.

    Query Small Element : Elle recherche un élément <small> à l'intérieur de ce conteneur, qui est utilisé pour afficher le message d'erreur.
    Set Class Name : Elle définit la classe de l'élément parent à 'form-control error', 
    ce qui peut être utilisé pour styliser le champ en rouge pour indiquer une erreur (ceci est géré par votre CSS).

    Set Message : Elle définit le texte de l'élément <small> au message d'erreur fourni.

Fonction setSuccessMsg

Cette fonction prend un seul paramètre : input.

    input : Comme pour setErrorMsg, c'est l'élément de formulaire pour lequel un indicateur de succès doit être affiché.

La fonction procède comme suit :

    Parent Element : Elle trouve l'élément parent de input.
    Set Class Name : Elle définit la classe de l'élément parent à 'form-control success'. 
    Cela peut être utilisé pour styliser le champ en vert pour indiquer que l'entrée est valide (ceci est aussi géré par votre CSS).

Intégration avec le Code de Validation

Ces fonctions sont utilisées dans un contexte de validation de formulaire, 
comme dans l'exemple que vous avez donné plus tôt pour la validation de l'adresse email. 
Lorsque vous évaluez la validité de l'entrée de l'utilisateur, selon que l'entrée est incorrecte ou correcte, 
vous appelez setErrorMsg ou setSuccessMsg pour fournir un retour visuel approprié.

Ces fonctions aident à créer une expérience utilisateur interactive et informative, 
indiquant clairement quand des corrections sont nécessaires ou quand tout est correct. 
Assurez-vous que votre CSS est bien configuré pour refléter les modifications de classe 
(comme .form-control.error et .form-control.success) pour que ces fonctions aient l'effet visuel désiré.



Pour intégrer une fonction basique isValidEmail qui effectue une validation simple de l'adresse email, 
vous pouvez l'écrire de manière à vérifier les critères minimaux d'une adresse email valide, 
comme la présence d'un @ et d'un point dans les positions correctes. Voici un exemple de fonction qui fait cela :

Étape 1 : Définir la fonction isValidEmail

function isValidEmail(email) {
    const atPos = email.indexOf('@');
    const dotPos = email.lastIndexOf('.');
    // Vérifie que '@' n'est pas à la première position, que '.' est après '@', et que le point n'est pas à la fin.
    return atPos > 0 && dotPos > atPos + 1 && dotPos < email.length - 1;
}


Cette fonction retourne true si l'email satisfait les conditions suivantes :

    Le symbole @ doit se trouver quelque part après le premier caractère.
    Un point . doit se trouver quelque part après le @.
    Le dernier caractère de l'adresse email ne doit pas être un point.

Étape 2 : Intégrer cette fonction dans votre code de validation

Vous avez déjà la structure de base pour utiliser cette fonction dans votre validation de formulaire. 
Voici comment cela s'intègre avec la fonction isValidEmail définie ci-dessus :

// Supposons que EmailValue est la valeur entrée par l'utilisateur dans le champ email du formulaire.
if (EmailValue === '') {
    setErrorMsg(Email, 'Email ne peut pas être vide');
} else if (!isValidEmail(EmailValue)) {
    setErrorMsg(Email, 'Email n'est pas valide');
} else {
    setSuccessMsg(Email);
}




Les fonctions setErrorMsg et setSuccessMsg que vous avez définies sont des exemples classiques de gestion d'état de validation dans un formulaire web en utilisant JavaScript pour manipuler le DOM (Document Object Model). Ces fonctions permettent d'afficher des messages d'erreur ou de succès, aidant l'utilisateur à comprendre ce qui est requis ou ce qui a été correctement rempli dans le formulaire. Voici comment chaque fonction fonctionne et comment elle peut être intégrée efficacement dans une application web :
Fonction setErrorMsg

Cette fonction est conçue pour gérer les situations où une entrée de l'utilisateur dans un champ de formulaire est incorrecte selon les règles de validation définies. 

Voici ce qu'elle fait pas à pas :

    Accès à l'élément parent : element.parentElement récupère le conteneur parent direct de l'élément de formulaire spécifié. 
    Typiquement, cet élément parent est une div qui englobe à la fois l'élément de formulaire (comme un input ou textarea)
     et un petit élément pour les messages d'erreur.

    Recherche d'un élément <small> : formControl.querySelector('small') trouve le premier élément <small> à l'intérieur du conteneur parent, 
    qui est utilisé pour afficher les messages d'erreur.

    Modification de la classe CSS : formControl.className = 'form-control error' attribue à l'élément parent 
    la classe CSS error en plus de form-control. Cela est souvent utilisé pour appliquer des styles spécifiques, 
    comme changer la bordure ou la couleur de fond pour indiquer visuellement une erreur.

    Affichage du message d'erreur : small.innerText = message définit le texte de l'élément <small> pour afficher 
    le message d'erreur personnalisé fourni en paramètre.

Fonction setSuccessMsg

Cette fonction est utilisée pour indiquer qu'une entrée utilisateur a réussi la validation. 
Elle suit un processus similaire mais simplifié puisqu'il n'y a pas de message texte à gérer :

    Accès à l'élément parent : Comme pour setErrorMsg, cela récupère le conteneur parent de l'élément de formulaire.

    Modification de la classe CSS : formControl.className = 'form-control success' attribue à l'élément parent la classe CSS 
    success en plus de form-control. 
    Ceci est souvent utilisé pour styliser l'élément de manière à refléter la validité de l'entrée 
    (par exemple, en appliquant une bordure verte).

Intégration avec la Validation du Formulaire

Ces fonctions sont typiquement appelées dans le cadre d'une fonction de validation plus large, 
ui vérifie les entrées des différents champs d'un formulaire. 

Par exemple :

function validateEmail(emailInput) {
    const emailValue = emailInput.value;
    if (emailValue === '') {
        setErrorMsg(emailInput, 'Email ne peut pas être vide');
    } else if (!isValidEmail(emailValue)) {
        setErrorMsg(emailInput, 'Email n'est pas valide');
    } else {
        setSuccessMsg(emailInput);
    }
}


Dans cet exemple, validateEmail prend un élément de formulaire (input), 
vérifie son contenu et utilise setErrorMsg ou setSuccessMsg en fonction du résultat de la validation.

Ces fonctions aident à créer une interface utilisateur claire et réactive qui guide les utilisateurs 
à travers le processus de remplissage des formulaires, 
en leur fournissant des retours immédiats sur la validité de leurs entrées. 
Pour que ces fonctions fonctionnent comme prévu, 
assurez-vous que votre CSS est configuré pour gérer correctement les classes form-control error et form-control success.

